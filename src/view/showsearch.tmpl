{{ define "view/showsearch.tmpl" }}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        form{
            line-height: 25px;
            text-align: center;
            background: url(/static/saintdiana.png);
            background-repeat: no-repeat;
            background-size: 70% 100%;
            background-position:center;
        }
        canvas{
            width:800px;height:600px;
            border:1px solid #000000;
            text-align: center;
        }
        .show_area{
            background:url(/static/star.jpg);
            background-repeat: no-repeat;
            background-size: 100% 100%;
            width:1000px;height:680px;
            border:1px solid #000000;
            margin:10px;padding: 20px;
        }
        .canvas_area{
            width:100%;height:620px;
            text-align: center;
            background-color: antiquewhite;
            padding: 0px
        }
        .bt{
            line-height: 10px;
            margin:30px;
            text-align: center;
        }
        #myapp{
            /*background: url(/static/bg.gif);
            background-size: 20% 20%;*/
        } 
        .bti{
            width: 143px;
            height: 35px;
            line-height: 14px;
            font-size: 14px;
            background: url(/static/buttonbg.jpg) no-repeat left top;
            color: #959595;
            padding: 0px 0px 2px 14px;
            font-family: "Arial","Tahoma","微软雅黑","雅黑";
            border: 0px;
            vertical-align: middle;
            margin: 8px;
        }
    </style>
</head>
<script src="https://cdn.bootcss.com/vue/2.5.2/vue.min.js"></script>
<script src="http://unpkg.com/axios/dist/axios.min.js"></script>

<body>
    <div id="myapp">
        <div class = "form_area">
            <form>
                障碍物密度:<br>
                <input type="text" name="dense" v-model.number="dense">
                <br>
                地图宽度:<br>
                <input type="text" name="cols"v-model.number="cols">
                <br>
                地图高度:<br>
                <input type="text" name="rows" v-model.number="rows">
                <br>
                代价下界:<br>
                <input type="text" name="costL"  v-model.number="costL">
                <br>
                代价上界:<br>
                <input type="text" name="costH" v-model.number="costH">
                <br>
                起点x:<br>
                <input type="text" name="startX" v-model.number="startX">
                <br>
                起点y:<br>
                <input type="text" name="startY" v-model.number="startY">
                <br>
                终点x:<br>
                <input type="text" name="targetX" v-model.number="targetX">
                <br>
                终点y:<br>
                <input type="text" name="targetY" v-model.number="targetY">
                <br>
                h值计算方法:<br>
                <select name="method" v-model="method">
                    <option value="halmi">曼哈顿距离</option>
                    <option value="euler">欧拉距离</option>
                </select>
                <br>
                <button type="button" v-on:click.prevent="getRunData">submit</button>
            </form> 
        </div>
        <div class = "pic_area">
            <div class="show_area">
                <div class = "canvas_area">
                    <canvas id="Dijkstra" width="1200" height="800"></canvas>
                </div>   
                <div class = "bt"> 
                    <button  class = "bti" type="button" v-on:click.prevent="drawDijkstra">Dijkstra算法图像</button>
                </div>
            </div>
        
            <div class = "show_area">
                <div class = "canvas_area">
                    <canvas id="Astar" width="1200" height="800"></canvas>
                </div>
                <div class = "bt"> 
                    <button class = "bti" type="button" v-on:click.prevent="drawAstar">A*算法图像</button>
                </div>
            </div>
            
            <div class = "show_area">
                <div class = "canvas_area">
                    <canvas id="DijkstraAstar" width="1200" height="800"></canvas>
                </div>
                <div class = "bt"> 
                    <button  class = "bti" type="button" v-on:click.prevent="drawMoA">MOA*算法图像</button>
                </div>
            </div>

            <div class = "show_area">
                <div class = "canvas_area">
                    <canvas id="BFS" width="1200" height="800"></canvas>
                </div>
                <div class = "bt"> 
                    <button  class = "bti" type="button" v-on:click.prevent="drawBFS">BFS算法图像</button>
                </div>
            </div>

        </div>
    </div>
</body>

<script>
var watchExampleVM = new Vue({
  el: '#myapp',
  data: {
    dense: 0.4,
    cols: 50,
    rows: 50,
    method: '',
    costL: 1 ,
    costH: 5,
    startX: 0,
    startY: 0,
    targetX: 48, 
    targetY: 48,
    djiData:Object,
    astarData:Object,
    moaData:Object,
    bfsData:Object,
    feasibleMap:Object,
    costMap:Object,
  },
  methods: {
        getRunData: function () {
            var vm = this
            axios.post('/selectdata', {
                    dense: vm.dense,
                    cols: vm.cols,
                    rows: vm.rows,
                    method: vm.method,
                    costL: vm.costL,
                    costH: vm.costH,
                    startX: vm.startX,
                    startY: vm.startY,
                    targetX: vm.targetX, 
                    targetY: vm.targetY,
            })
            .then(function (response) {
                alert("send");
                djiData = response.data.retData.Dijkstra
                astarData = response.data.retData.As
                moaData = response.data.retData.MOA
                bfsData = response.data.retData.BFS
                feasibleMap = response.data.feasibleMap
                costMap = response.data.costMap

                console.log(djiData);
                console.log(astarData);
                console.log(moaData);
                console.log(bfsData);   
                console.log(feasibleMap)          
                console.log(costMap) 

            })
            .catch(function (error) {
                alert(error);
                console.log(error);
            });
        },
        
        drawDijkstra:function(){
            this.drawPic(djiData,'Dijkstra')
            //alert("fuck")
        },
        drawAstar:function(){
            this.drawPic(astarData,'Astar')
            //alert("fuck")
        },
        drawMoA:function(){
           this.drawPic(moaData,'DijkstraAstar')
           //alert("fuck")
        },
        drawBFS:function(){
           this.drawPic(bfsData,'BFS')
           //alert("fuck")
        },
        drawPic:function(data, elementId){
            const canvas = document.getElementById(elementId);
            const ctx = canvas.getContext('2d');
            this.initPic(elementId);
            ctx.fillStyle = 'green';
            ctxSt = (1200-this.cols*10)/2
            ctxEd = (800-this.rows*10)/2
            //console.log(data.tract)
            let count = 0
            window.setInterval(function(){
                    if (count === data.tract.length){return}
                    ele = data.tract[count]
                    ctx.fillRect(ctxSt+ele[0]*10,ctxEd+ele[1]*10,10,10)
                    ctx.strokeRect(ctxSt+ele[0]*10,ctxEd+ele[1]*10,10,10)
                    count++
                },8)
        },
        initPic:function(elementId) {
            const canvas = document.getElementById(elementId);
            const ctx = canvas.getContext('2d');
            ctxSt = (1200-this.cols*10)/2
            ctxEd = (800-this.rows*10)/2
            ctx.clearRect(0, 0, 1200, 800)
            for(i=0;i<this.rows;i++){
                for(j=0;j<this.cols;j++){
                    rate = (costMap[i][j]-this.costL)/(this.costH-this.costL)
                    ctx.fillStyle = "rgba(102, 102, 255, "+rate+")";
                    ctx.fillRect(ctxSt+i*10, ctxEd+j*10, 10, 10)
                    ctx.strokeRect(ctxSt+i*10, ctxEd+j*10, 10, 10)
                    if (feasibleMap[i][j]===1){
                        ctx.fillStyle = 'black';
                        ctx.fillRect(ctxSt+i*10, ctxEd+j*10, 10, 10)
                    }
                }
            }
            
        }
    }
})
</script>
{{ end }}